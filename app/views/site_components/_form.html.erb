<%# hack para criar um hash vazio caso as configurações sejam nulas %>
<% @site_component.settings ||= "{}" %>

<%= #TODO Traduzir componentes para o ingles; Transformar componentes em pacotes (estilo redmine) %>

<!-- VARIAVEIS PARA O JS -->
<input id="components_settings"         type="hidden" meta-data="<%= components_settings.to_json %>" />
<input id="component_settings"          type="hidden" meta-data="<%= eval(@site_component.settings).to_json %>" />
<input id="components_settings_locales" type="hidden" meta-data="<%= components_settings_locales.to_json %>" />

<%= content_for :javascripts, javascript_include_tag('site_component_form') %>

<%= form_for [@site,@site_component], :builder => SemanticFormBuilder do |f| %>
  <% if @site_component.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@site_component.errors.count, "error") %> <%= t "prohibited_being_saved", :count => @site_component.errors.count %>:</h2>

      <ul>
      <% @site_component.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  <%= f.hidden_field :site_id, :value => @site.id %>

  <div class="field">
    <%= f.select :place_holder, places_holder.collect{ |p| [t("components.pos.#{p}"), p] },
      :label => t("place").capitalize %>
  </div>

  <div class="field">
    <%= f.select :component, components.collect{ |c| [t("components.#{c}"), c] }.sort{ |a,b| a[0].downcase <=> b[0].downcase },
      :label => t("component.one") %>
  </div>

  <div class="field" id="settings">
    <%= f.text_area :settings, :label => t("setting.other") %>
  </div>

  <div class="actions">
    <%= f.submit_and_cancel t("save"), t("cancel") %>
  </div>
<% end %>
